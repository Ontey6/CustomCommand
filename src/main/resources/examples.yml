################################
##          Examples          ##
################################

# it is recommended you go through some of these examples and especially read these comments

# note:
# a 'ccmd' is a command created with this plugin and means 'Custom Command'
# Field types can be either List or String

# simple message
moin:
  message: 'Moin, &e<player>' # 'moin' is a common german greeting

# simple broadcast
greet-all:
  message: '&eNow greeting all players!'
  broadcast: '&e<player>&r greets you!' # player is still the one who ran the command

# extended message and broadcast
# They can be lists
ping-all:
  message:
    - '&d---------------------'
    - '&enow pinging everyone!'
    - '&d---------------------'
  broadcast:
    - '&d---------------------'
    - '&b<player> pinged you  '
    - '&d---------------------'

# advanced broadcast
advanced-broadcast:
  broadcast:
    range: 10 # range from the player
    permission: ccmd.struct.bc
    condition: '<player.isOp>' # placeholders are ran as the player who received broadcast
    broadcast:
      - 'Hello from &e<player>&r!'
    aliases:
      - abc

# arguments
get:
  commands: 'give <arg1> <arg2> <arg3>'
  #args: [] # this would allow any amount of args that each have no restrictions
  args: # The args the player HAS TO specify
    # empty list ('[]') allows any argument at that position
    1: [] # player
    2: [] # item
    3: int # count

# tab completer
placeholder:
  message: '&e<arg1>&7:&b <<arg1>>'
  aliases:
    - ph
  args:
    1: []
  tab:
    1: name

# command conditions
evaluate:
  commands:
    - '<!condition> <arg1>'
    - '<!msg>&atrue'
    - '<!condition> <arg1> != true' # multiple lines of conditions
    - '<!condition> <arg1> != yes'  # mean that both have to be true
    - '<!msg>&cfalse'               # for the line after to be run
  aliases: eval
  args:
    1: []